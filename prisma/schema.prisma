generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

model Specializations {
  id                   Int            @id @default(autoincrement())
  name                 String         @db.VarChar(100)
  visitPrice           Decimal        @db.Decimal(10, 2)
  visitCheckingPrice   Decimal        @db.Decimal(10, 2)
  description          String?        @db.VarChar(500)
  doctors              Doctor[]
  services             Services[]
  reservations         Reservations[]

  @@index([name])
}

model Staff {
  id                   String           @id @default(uuid())
  name                 String           @db.VarChar(100)
  email                String           @unique @db.VarChar(255)
  password             String
  phoneNumber          String           @db.VarChar(20)
  role                 StaffRole
  reservations         Reservations[]

  @@index([email, phoneNumber])
}

model Doctor {
  id                   String           @id @default(uuid())
  name                 String           @db.VarChar(100)
  email                String           @unique @db.VarChar(255)
  password             String
  phoneNumber          String           @db.VarChar(20)
  specializationId     Int
  percentagePerVisit   Decimal?         @db.Decimal(5, 2)
  specialization       Specializations  @relation(fields: [specializationId], references: [id])
  reservations         Reservations[]

  @@index([email, phoneNumber])
}

model Patients {
  id                   String         @id @default(uuid())
  name                 String         @db.VarChar(100)
  age                  Int
  gender               Gender
  address              String?        @db.VarChar(255)
  phoneNumberPatients  String         @db.VarChar(20)
  reservations         Reservations[]
  billings             Billing[]
  deletedAt            DateTime?

  @@index([phoneNumberPatients])
}

model Services {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @db.VarChar(100)
  description          String?                @db.VarChar(500)
  price                Decimal                @db.Decimal(10, 2)
  specializationId     Int
  specialization       Specializations        @relation(fields: [specializationId], references: [id])
  reservationServices  ReservationServices[]

  @@index([name])
}

model Reservations {
  id                   String                 @id @default(uuid())
  patientId            String
  staffId              String?
  doctorId             String?
  specializationId     Int
  date                 DateTime               @db.Date
  time                 DateTime               @db.Time
  initialVisitCost     Decimal                @db.Decimal(10, 2)
  totalCost            Decimal?               @db.Decimal(10, 2)
  status               ReservationStatus
  patient              Patients               @relation(fields: [patientId], references: [id])
  staff                Staff?                 @relation(fields: [staffId], references: [id])
  doctor               Doctor?                @relation(fields: [doctorId], references: [id])
  specialization       Specializations        @relation(fields: [specializationId], references: [id])
  reservationServices  ReservationServices[]
  billings             Billing[]

  @@index([date, time])
}

model ReservationServices {
  id             Int          @id @default(autoincrement())
  reservationId  String
  serviceId      Int?
  reservation    Reservations @relation(fields: [reservationId], references: [id])
  service        Services?    @relation(fields: [serviceId], references: [id])
}

model Billing {
  id             Int           @id @default(autoincrement())
  patientId      String?
  reservationId  String?
  totalAmount    Decimal?       @db.Decimal(10, 2)
  paidAmount     Decimal?       @db.Decimal(10, 2)
  billingDate    DateTime       @db.Date
  patient        Patients?      @relation(fields: [patientId], references: [id])
  reservation    Reservations?  @relation(fields: [reservationId], references: [id])

  @@index([billingDate])
}










enum StaffRole {
  NURSE
  RECEPTIONIST
  ADMIN
}

enum Gender {
  MALE
  FEMALE
}

enum ReservationStatus {
  SCHEDULED
  CONFIRMED
  CANCELLED
  COMPLETED
}
